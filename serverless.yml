service: dynamodb-outbox-demo

provider:
  name: aws
  runtime: nodejs18.x
  architecture: arm64
  stage: ${opt:stage, "prod"}
  region: ${opt:region, "eu-north-1"}
  memorySize: ${opt:memory, 1024}
  timeout: 10
  logRetentionInDays: 7
  versionFunctions: false
  deploymentBucket:
    blockPublicAccess: true
    maxPreviousDeploymentArtifacts: 5
    serverSideEncryption: AES256
  stackTags:
    service: ${self:service}
    stage: ${self:provider.stage}
    runtime: ${self:provider.runtime}
    region: ${self:provider.region}
  tags:
    service: ${self:service}
    stage: ${self:provider.stage}
    runtime: ${self:provider.runtime}
    region: ${self:provider.region}
  apiGateway:
    minimumCompressionSize: 1024

plugins:
  - serverless-esbuild
  - serverless-offline
  - serverless-iam-roles-per-function

package:
  individually: true

custom:
  config:
    awsAccountNumber: "123412341234"
    eventBusName: ${self:service}
    eventsTableName: ${self:service}-events
    booksTableName: ${self:service}-books
    presentationTableName: ${self:service}-presentation
  aws:
    eventBusArn: arn:aws:events:${self:provider.region}:${self:custom.config.awsAccountNumber}:event-bus/${self:custom.config.eventBusName}
    eventsTableArn: arn:aws:dynamodb:${self:provider.region}:${self:custom.config.awsAccountNumber}:table/${self:custom.config.eventsTableName}
    booksTableArn: arn:aws:dynamodb:${self:provider.region}:${self:custom.config.awsAccountNumber}:table/${self:custom.config.booksTableName}
    presentationTableArn: arn:aws:dynamodb:${self:provider.region}:${self:custom.config.awsAccountNumber}:table/${self:custom.config.presentationTableName}

functions:
  AddBook:
    handler: src/AddBook.handler
    description: Adds a book to the collection
    events:
      - httpApi:
          method: POST
          path: /book
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:PutItem
        Resource: ${self:custom.aws.eventsTableArn}
      - Effect: "Allow"
        Action:
          - dynamodb:PutItem
        Resource: ${self:custom.aws.booksTableArn}
    environment:
      REGION: ${self:provider.region}
      EVENTS_TABLE_NAME: ${self:custom.config.eventsTableName}
      BOOKS_TABLE_NAME: ${self:custom.config.booksTableName}

  RemoveBook:
    handler: src/RemoveBook.handler
    description: Removes a book from the collection
    events:
      - httpApi:
          method: DELETE
          path: /book
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:DeleteItem
        Resource: ${self:custom.aws.booksTableArn}
    environment:
      REGION: ${self:provider.region}
      EVENTS_TABLE_NAME: ${self:custom.config.eventsTableName}
      BOOKS_TABLE_NAME: ${self:custom.config.booksTableName}

  BookAdded:
    handler: src/BookAdded.handler
    description: Respond to a book being added
    events:
      - eventBridge:
          eventBus: ${self:custom.config.eventBusName} # Creates new EventBridge bus
          pattern:
            source:
              - OutboxDemo.Books
            detail-type:
              - BookAdded
          inputTransformer:
            inputPathsMap:
              id: "$.detail.dynamodb.NewImage.pk.S"
              eventData: "$.detail.dynamodb.NewImage.eventData.S"
            inputTemplate: '{"id": <id>,"eventData": <eventData>}'
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:PutItem
          - dynamodb:Query
        Resource: ${self:custom.aws.presentationTableArn}
    environment:
      REGION: ${self:provider.region}
      TABLE_NAME: ${self:custom.config.presentationTableName}

  BookRemoved:
    handler: src/BookRemoved.handler
    description: Respond to a book being removed
    events:
      - eventBridge:
          eventBus: ${self:custom.config.eventBusName}
          pattern:
            source:
              - OutboxDemo.Books
            detail-type:
              - BookRemoved
          inputTransformer:
            inputPathsMap:
              name: "$.detail.dynamodb.Keys.pk.S"
            inputTemplate: '{"name": <name>}'

resources:
  Resources:
    BooksTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.config.booksTableName}
        AttributeDefinitions:
          - AttributeName: pk
            AttributeType: S
        KeySchema:
          - AttributeName: pk
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

    EventsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.config.eventsTableName}
        AttributeDefinitions:
          - AttributeName: pk
            AttributeType: S
          - AttributeName: sk
            AttributeType: S
        KeySchema:
          - AttributeName: pk
            KeyType: HASH
          - AttributeName: sk
            KeyType: RANGE
        StreamSpecification:
          StreamViewType: NEW_IMAGE
        BillingMode: PAY_PER_REQUEST

    PresentationTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.config.presentationTableName}
        AttributeDefinitions:
          - AttributeName: pk
            AttributeType: S
        KeySchema:
          - AttributeName: pk
            KeyType: HASH
        TimeToLiveSpecification:
          AttributeName: expiresAt
          Enabled: true
        BillingMode: PAY_PER_REQUEST

    PipeRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - pipes.amazonaws.com
              Action:
                - sts:AssumeRole
        Policies:
          - PolicyName: !Sub ${AWS::StackName}-source-policy
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - "dynamodb:DescribeStream"
                    - "dynamodb:GetRecords"
                    - "dynamodb:GetShardIterator"
                    - "dynamodb:ListStreams"
                  Resource: !GetAtt EventsTable.StreamArn
          - PolicyName: !Sub ${AWS::StackName}-target-policy
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - "events:PutEvents"
                  Resource: ${self:custom.aws.eventBusArn}

    BookAddedPipe:
      Type: AWS::Pipes::Pipe
      Properties:
        Name: !Sub ${AWS::StackName}-added
        Description: "Pipes to connect to DDB stream listening only for insert changes"
        RoleArn: !GetAtt PipeRole.Arn
        Source: !GetAtt EventsTable.StreamArn
        SourceParameters:
          FilterCriteria:
            Filters:
              - Pattern: '{ "eventName": ["INSERT"] }'
          DynamoDBStreamParameters:
            StartingPosition: LATEST
            BatchSize: 1
        Target: ${self:custom.aws.eventBusArn}
        TargetParameters:
          EventBridgeEventBusParameters:
            DetailType: "BookAdded"
            Source: "OutboxDemo.Books"

    BookRemovedPipe:
      Type: AWS::Pipes::Pipe
      Properties:
        Name: !Sub ${AWS::StackName}-removed
        Description: "Pipes to connect to DDB stream listening only for remove changes"
        RoleArn: !GetAtt PipeRole.Arn
        Source: !GetAtt EventsTable.StreamArn
        SourceParameters:
          FilterCriteria:
            Filters:
              - Pattern: '{ "eventName": ["REMOVE"] }'
          DynamoDBStreamParameters:
            StartingPosition: LATEST
            BatchSize: 1 # Safer but more expensive if high volumes of changes are happening
        Target: ${self:custom.aws.eventBusArn}
        TargetParameters:
          EventBridgeEventBusParameters:
            DetailType: "BookRemoved"
            Source: "OutboxDemo.Books"